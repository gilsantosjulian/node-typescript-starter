import { param, query } from 'express-validator';
import { messages } from './validatorMessages';

export const vendors: any = [
  param('vendor_wallet')
    .isIn(['$shd_bogota'])
    .withMessage(messages('vendor_wallet').isIn),
  param('invoice_id')
    .not()
    .isEmpty()
    .withMessage(messages('invoice_id').isEmpty)
    .isLength({ max: 11 })
    .withMessage(messages('invoice_id', 11).isLength)
    .isNumeric()
    .withMessage(messages('invoice_id').isNumeric),
  query('value')
    .not()
    .isEmpty()
    .withMessage(messages('value').isEmpty)
    .isLength({ max: 17 })
    .withMessage(messages('value', 17).isLength)
    .isNumeric()
    .withMessage(messages('value').isNumeric),
  query('nature')
    .not()
    .isEmpty()
    .withMessage(messages('nature').isEmpty)
    .isLength({ max: 2 })
    .withMessage(messages('nature', 2).isLength)
    .isNumeric()
    .withMessage(messages('nature').isNumeric),
  query('processor')
    .not()
    .isEmpty()
    .withMessage(messages('processor').isEmpty)
    .isLength({ max: 2 })
    .withMessage(messages('processor', 2).isLength)
    .isNumeric()
    .withMessage(messages('processor').isNumeric),
  query('branch')
    .not()
    .isEmpty()
    .withMessage(messages('branch').isEmpty)
    .isLength({ max: 3 })
    .withMessage(messages('branch', 3).isLength)
    .isNumeric()
    .withMessage(messages('branch').isNumeric),
  query('environment')
    .not()
    .isEmpty()
    .withMessage(messages('environment').isEmpty)
    .isLength({ max: 2 })
    .withMessage(messages('environment', 2).isLength)
    .isNumeric()
    .withMessage(messages('enviroment').isNumeric),
  query('subscription')
    .not()
    .isEmpty()
    .withMessage(messages('subscription').isEmpty)
    .isLength({ max: 13 })
    .withMessage(messages('subscription', 13).isLength)
    .isAlphanumeric()
    .withMessage(messages('subscription').isAlphanumeric),
  query('tx_id')
    .not()
    .isEmpty()
    .withMessage(messages('tx_id').isEmpty)
    .isLength({ max: 10 })
    .withMessage(messages('tx_id', 10).isLength)
    .isAlphanumeric()
    .withMessage(messages('tx_id').isAlphanumeric),
  query('sourceDate')
    .not()
    .isEmpty()
    .withMessage(messages('sourceDate').isEmpty)
    .isLength({ max: 20 })
    .withMessage(messages('sourceDate', 20).isLength)
    .isISO8601()
    .withMessage(messages('sourceDate').invalidDate),
  query('language')
    .not()
    .isEmpty()
    .withMessage(messages('language').isEmpty)
    .isLength({ max: 5 })
    .withMessage(messages('language', 5).isLength)
    .matches(/^([a-z][a-z]\-[a-z][a-z])$/)
    .withMessage(messages('language').invalidLanguage),
  query('reference')
    .optional()
    .isLength({ max: 11 })
    .withMessage(messages('language', 11).isLength)
    .isAlphanumeric()
    .withMessage(messages('language').isAlphanumeric),
];
